1.1: What is asyncio
--------------------
- in a synchronous application, code runs sequentially 
    - next line of code has to wait till the one before is finished
- concurrency: allowing more than one task to be handled at the same time
    - in relation to I/O -> allow multiple web request to be made at the same time, allowing simultaneous connections to web server,etc
- asynchronous programming allows for a long running task to be run in the background separate from the main application
    - once task completed, we get notified so that we can process the result
- async-io uses single threaded event loop

1.2: What is I/O bound and what is CPU bound
--------------------
- limiting factors that prevents the operation from running faster
- cpu bound operations are typically computations and processing code
- i/o bound is when we spend most of our time waiting on a network or other i/o device

1.3: Understanding concurrency, parallelism, and multitasking
--------------------
- happening concurrently -> happening at the same time (concurrency)
    - does not imply that they are running in parallel
    - task switching
- running in parallel -> 2+ tasks happening concurrency and executing at the same time (parallelism)
    - executing at the same time with multiple tasks
- concurrency is about multiple tasks that can happen independently from one another
    - cpu with one core can use preemptive multitasking to switch between tasks
- parallelism is about doing multiple things at the same time
    - cpu with multiple cores can run multiple tasks in parallel
- multitasking
    - preemptive multitasking: os decides what to execute via time slicing
    - cooperative multitasking: explicity code points in application where other tasks can run
        - used by asyncio, mark code where we can wait for result to come back then wake up when finished
        - less resource intensive, dont need context switches

1.4: Understanding processes, threads, multithreading and multiprocessing
--------------------
- process: application run that has a private memory space
    - always has one thread associated with it, called the main thread
    - can create worker/background threads
- thread: lighter-weight process 
    - share memory with the process who created them









